import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 * @author Praveen
 * Main class that does contains methods to perform various 
 * operations based on project specification
 */
public class Main {
	
	private static int result = 0;
	/**
	 * Customer hashmap.
	 * Key customer id
	 * Value customer object
	 */
	private HashMap<Long, Customer> customerMap 
				= new HashMap<Long, Customer>(); 

	private HashMap<Integer, HashSet<Long>> categoryMap
				= new HashMap<Integer, HashSet<Long>>();
	
	private HashMap<Integer, Integer> topThree
				= new HashMap<Integer, Integer>();
	/**
	 * @param id id of the customer that uniquely identfies the customer
	 * @param category a list of categories with values ranging from 1 to 999
	 * @return returns 1 upon creating the customer object or 
	 * return -1 if there is already a customer with the same id;
	 */
	private int insert(long id, HashSet<Integer> category) {
		Customer customer;
		
		//Initially the customer object will have sero dollar as the amount
		double amt = Globals.ZERODOLLAR;
		
		customer = new Customer(id, category, amt);
		
		return insertCustomerObjectToMap(customer);
	}
	
	/**
	 * @param customer Object that represents a customer
	 * @return 1 if customer object is sucessfully inserted or 
	 * else -1
	 */
	private int insertCustomerObjectToMap(Customer customer) {
		//Lets check if the customer is already in the map
		long id = customer.getId();
		
		if(!customerMap.containsKey(id)) {
			//Okay, we are good to inser the new customer object
			customerMap.put(id, customer);
			
			//Lets add customers to the categorymap
			addCustomerToCategory(customer);
			/*System.out.println(customer);*/
			
			return Globals.OKAY;
		}
		
		//if we reached this far, something is wrong. So return -1
		return Globals.SOMETHINGWRONG;
	}
	
	/**
	 * @param customer adds customer to the categoryMap
	 */
	private void addCustomerToCategory(Customer customer) {
		HashSet<Integer> category = customer.getCategory();
		HashSet<Long> custid;
		if(category != null) {
			Iterator<Integer> cat = category.iterator();
			
			while(cat.hasNext()) {
				int catid = cat.next();
				
				//if the category is not in the map, then add the categoryid and customer id 
				if(!categoryMap.containsKey(catid)) {
					custid = new HashSet<Long>();
					custid.add(customer.getId());
					categoryMap.put(catid, custid);
				} 
				// if the category id is already in the map, get the current customer id for the category
				// and add the new customerid to it.  
				else {
					custid = categoryMap.get(catid);
					custid.add(customer.getId());
					categoryMap.put(catid, custid);
				}
			}
		}
		
		category = null;
		custid = null;
		
		//System.out.println("Cat Map: " + categoryMap);
	}
	
	/**
	 * @param category set of category that has been removed from the user
	 * @param id id of the customer to be removed from the category map
	 */
	private void removeCustomerFromCategoryMap(HashSet<Integer> category, long id) {
		Iterator<Integer> iterator = category.iterator();
		
		while(iterator.hasNext()) {
			int catid = iterator.next();
			HashSet<Long> custid = categoryMap.get(catid);
			custid.remove(id);
			categoryMap.put(catid, custid);
		}
		
		//System.out.println(categoryMap);
	}
	
	/**
	 * @param id id of the customer
	 * @param amount Revenue to be added
	 * @return
	 */
	private int addRevenue(long id, double amount) {
		//First lets check if the customer exists in our map
		if(!customerMap.containsKey(id)) {
			return Globals.SOMETHINGWRONG;
		} else {
			//Lets retrieve the previous amount
			Customer customer = customerMap.get(id);
			double newAmount = amount + customer.getAmount();
			
			//Update the Amount
			customer.setAmount(newAmount);	
			//Lets update the transaction count for the customer in question
			customer.setTransactionCount(1);
			
			/*System.out.println("Revenue Added: " + oldAmount.getDollar());*/

			//System.out.println((int) customer.getAmount());
			return (int) customer.getAmount();
		}
		
	}
	
	/**
	 * @param id id of the customer 
	 * @return retruns the revenue generated by the user so far
	 */
	private int find(long id) {
		Customer customer = customerMap.get(id);
		
		if(customer != null) {
			int revenue = (int) customer.getAmount();
			
			/*System.out.println("Revenue: " + revenue);*/
			
			return revenue; 
		}
		
		return Globals.SOMETHINGWRONG;
	}
	
	/**
	 * @param id id of the customer to be deleted
	 * @return deletes the customer object from the record and
	 * returns the revenue generated by the customer so far
	 */
	private int delete(long id) {
		Customer customer = customerMap.get(id);
		
		if(customer != null) {
			int dollar = (int) customer.getAmount();
			
			//Remove the customer object from the map and set the object to null
			customerMap.remove(id);
			customer = null;
			
			
			return dollar;
		} 
		
		return Globals.SOMETHINGWRONG;
	}
	
	/**
	 * @param category category for which we have to find the top three users
	 * @return amount spent by the top three users truncated to dollar
	 */
	private int topThree(int category) {
		if(topThree.containsKey(category)) {
			return topThree.get(category);
		}
		PriorityQueue<Double> topthree = new PriorityQueue<Double>();
		double revenue = 0.0;
		
		HashSet<Long> customers = categoryMap.get(category);
		Iterator<Long> iterator = customers.iterator();
		
		while(iterator.hasNext()) {
			Long id = iterator.next();
			double dollar = customerMap.get(id).getAmount();
			
			if(topthree.size() <= 2) {
				topthree.add(dollar);
			} else {
				if(topthree.peek() < dollar) {
					topthree.remove();
					topthree.add(dollar);
				}
			}
		}
		
		//Debugging
		//-----------------------------------------
		//if(category == 193)
		//System.out.println(topthree);
		
		
		for(int i = 1; i <= 3; i++) {
			
			if(topthree.isEmpty()) break;
			
			double amt = topthree.remove();
			
			//Debugging
			//-----------------------------------------
			//System.out.println("Top: " + amt);
			
			revenue += amt;
		}
		
		topThree.put(category, (int) revenue);
		
		//Debugging
		//-----------------------------------------
		//System.out.println("top three: " + revenue);
		return (int) revenue;
	}
	
	/**
	 * @param id id of the customer record from which the category has to be removed
	 * @param removeCategory a list of category to be removed
	 * @return the size of the updated category list after removing the categories
	 */
	private int removeInterests(long id, HashSet<Integer> removeCategory) {
		
		Customer customer = customerMap.get(id);
		
		if(customer != null) {
			HashSet<Integer> category = customer.getCategory();
			
			Iterator<Integer> iter = removeCategory.iterator();
			while(iter.hasNext()) {
				Integer catid = iter.next();
				if(category.contains(catid)) {
					category.remove(catid);
				}
				
				if(categoryMap.containsKey(catid)) {
					HashSet<Long> custid = categoryMap.get(catid);
					custid.remove(id);
					categoryMap.replace(catid, custid);
				}
			}
			
			//We have removed the categories from the Customer Category list.
			//We need to update the current category for the customer
			customer.setCategory(category);
			
			//removeCustomerFromCategoryMap(category, id);
			category = null;
			//Debugging
			//-----------------------------------------
			//System.out.println("After removing: " + customer.getCategory().size());
			//System.out.println("Customer: " + customer);
			
			return customer.getCategory().size();
		}
		
		return Globals.SOMETHINGWRONG;
	}
	
	/**
	 * @param command a set of categories. Starts from category[2]
	 * @return a List with category
	 */
	private HashSet<Integer> createCategories(String[] command, long id) {
		HashSet<Integer> category = new HashSet<Integer>();
		HashSet<Long> custid;
		for(int i = 2; i < command.length; i++) {
			int catid = Integer.parseInt(command[i]);
			//Lets not add any more to the list if the current category is "0"
			if(command[i].equalsIgnoreCase(Globals.ENDOFCATEGORY)) break;
			
			//Lets make sure that category is not greater than 999
			if(Integer.parseInt(command[i]) > 999) continue;
			
			category.add(catid);
			
			//Logic for updating categorymap
			/*if(!categoryMap.containsKey(catid)) {
				custid = new HashSet<Long>();
				custid.add(id);
				categoryMap.put(catid, custid);
			} else {
				custid = categoryMap.get(catid);
				custid.add(id);
				categoryMap.replace(catid, custid);
			}*/
			
		}
		
		//System.out.println("Cat Map: " + categoryMap);
		
		//We need to maintain a list of categories. So convert it 
		//to a list before returning
		return category;
	}
	
	/**
	 * Method  that calls appropriate function based on the line param
	 * 
	 * @param line Represents a single line from the input file
	 * @return returns a Integer that is resultant of output mod 997 
	 * to avoid overflow 
	 */
	public void performOperation(String line) {
		long id;
		/*
		 * command[0] contains the operation to be performed
		 * command[1] contains the customer id
		 */
		String[] command = line.split(" ");
		id = Long.parseLong(command[1]); 
		
		switch(command[0].toLowerCase()) {
		case Globals.INSERT:
			HashSet<Integer> category = createCategories(command, id);
			result += insert(id, category) % Globals.MODVALUE ;
			result = result % Globals.MODVALUE;
			break;
			 
		case Globals.ADDREVENUE:
			double amount = Double.parseDouble(command[2]);
			result += addRevenue(id, amount) % Globals.MODVALUE;
			result = result % Globals.MODVALUE;
			break;
			
		case Globals.FIND:
			result += find(id) % Globals.MODVALUE;
			result = result % Globals.MODVALUE;
			break;
			
		case Globals.DELETE:
			result += delete(id) % Globals.MODVALUE;
			result = result % Globals.MODVALUE;
			break;
		
		/*case Globals.TOPTHREE:
			result += topThree(Integer.parseInt(command[1])) % Globals.MODVALUE;
			result = result % Globals.MODVALUE;
			//System.out.println("result: " + result);
			break;*/
		
		case Globals.ADDINTEREST:
			break;
		
		/*case Globals.REMOVEINTEREST:
			HashSet<Integer> removeCategories = Helper.createCategories(command);
			result += removeInterests(id, removeCategories) % Globals.MODVALUE;
			break;*/
			
		}
		
		
			
	}
	
	public static void main(String[] args) {
		
		Scanner sc = null;
		try {
			sc = new Scanner(new File(args[0]));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		Main main = new Main();
		int linen = 1;
		Helper.timer();
		while(true) {
			String line = sc.nextLine();
			//System.out.println(linen++);
			
			//------------------For my time measuring
			//if(linen == 200000) break;
			
			
			//
			
			if(line.equalsIgnoreCase(Globals.END)) break;
			else if(line.charAt(0) == Globals.COMMENT) continue;
			else main.performOperation(line);
		}
		System.out.println("result: " + Main.result % Globals.MODVALUE);
		Helper.timer();
	}

}
