import java.util.HashSet;

/**
 * @author Praveen
 * Helper class that has static methods.
 *
 */
public class Helper {
	
	private static int phase = 0;
	private static long startTime, endTime, elapsedTime;
	 
	/**
	 * @param amount Revenue generated by the user in question
	 * @return Amount object
	 */
	public static Amount createAmount(double amount) {
		Amount amt;
		
		
		int dollar = (int) amount;
		int cent = (int) ((amount * 100) % 100);
		
		amt = new Amount(dollar, cent);
		
		return amt;
	}

	/**
	 * @param command a set of categories. Starts from category[2]
	 * @return a List with category
	 */
	public static HashSet<Integer> createCategories(String[] command) {
		HashSet<Integer> category = new HashSet<Integer>();
		
		for(int i = 2; i < command.length; i++) {
			//Lets not add any more to the list if the current category is "0"
			if(command[i].equalsIgnoreCase(Globals.ENDOFCATEGORY)) break;
			
			//Lets make sure that category is not greater than 999
			if(Integer.parseInt(command[i]) > 999) continue;
			
			//We don't want to add repeated categories to the list
			if(!category.contains(Integer.parseInt(command[i]))) {
				category.add(Integer.parseInt(command[i]));
			}
		}
		
		//We need to maintain a list of categories. So convert it 
		//to a list before returning
		return category;
	}
	
	/**
	 * Timer functionality. Helps us to measure the amount of time the program utilized 
	 * to produce an output
	 */
	public static void timer()
    {
        if(phase == 0) {
	    startTime = System.currentTimeMillis();
	    phase = 1;
	} else {
	    endTime = System.currentTimeMillis();
            elapsedTime = endTime-startTime;
            System.out.println("Time: " + elapsedTime + " msec.");
            memory();
            phase = 0;
        }
    }
	
	/**
	 * Displays the amount memory the program used
	 */
	public static void memory() {
        long memAvailable = Runtime.getRuntime().totalMemory();
        long memUsed = memAvailable - Runtime.getRuntime().freeMemory();
        System.out.println("Memory: " + memUsed/1000000 + " MB / " + memAvailable/1000000 + " MB.");
    }

}
